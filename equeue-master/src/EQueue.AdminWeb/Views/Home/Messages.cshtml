@model EQueue.AdminWeb.Models.MessagesViewModel
@{
    ViewBag.Title = "消息列表";
}
<div>
    @using (Html.BeginForm("Messages", "Home", new { }, FormMethod.Post, new { @class = "form-inline", role = "form" }))
    {
        <div class="form-group">
            <label class="sr-only" for="Topic"></label>
            @Html.TextBoxFor(m => m.Topic, new { @class = "form-control", placeholder = "Topic" })
        </div>
        <div class="form-group">
            <label class="sr-only" for="QueueId"></label>
            @Html.TextBoxFor(m => m.QueueId, new { @class = "form-control", placeholder = "QueueId" })
        </div>
        <div class="form-group">
            <label class="sr-only" for="Code"></label>
            @Html.TextBoxFor(m => m.Code, new { @class = "form-control", placeholder = "Code" })
        </div>
        <div class="form-group">
            <label class="sr-only" for="RoutingKey"></label>
            @Html.TextBoxFor(m => m.RoutingKey, new { @class = "form-control", placeholder = "RoutingKey" })
        </div>
        <button type="submit" class="btn btn-default">查询</button>
    }
    <table class="table table-striped">
        <thead>
            <tr>
                <th width="10%" class="text-center vertical-center">
                    MessageOffset
                </th>
                <th width="15%" class="vertical-center">
                    Topic
                </th>
                <th width="5%" class="text-center vertical-center">
                    QueueId
                </th>
                <th width="10%" class="text-center vertical-center">
                    QueueOffset
                </th>
                <th width="5%" class="text-center vertical-center">
                    Code
                </th>
                <th width="10%" class="vertical-center">
                    RoutingKey
                </th>
                <th width="15%" class="vertical-center">
                    CreatedTime
                </th>
                <th width="15%" class="vertical-center">
                    ArrivedTime
                </th>
                <th width="15%" class="vertical-center">
                    StoredTime
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var message in Model.Messages)
            {
                <tr>
                    <td class="text-center vertical-center">
                        @Html.ActionLink(message.MessageOffset.ToString(), "Message", new { searchMessageOffset = message.MessageOffset }, new { target = "_blank" })
                    </td>
                    <td class="vertical-center">
                        @message.Topic
                    </td>
                    <td class="text-center vertical-center">
                        @message.QueueId
                    </td>
                    <td class="text-center vertical-center">
                        @message.QueueOffset
                    </td>
                    <td class="text-center vertical-center">
                        @message.Code
                    </td>
                    <td class="vertical-center">
                        @message.RoutingKey
                    </td>
                    <td class="vertical-center">
                        @message.CreatedTime
                    </td>
                    <td class="vertical-center">
                        @message.ArrivedTime
                    </td>
                    <td class="vertical-center">
                        @message.StoredTime
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="pager">
        @{
            EQueue.AdminWeb.Controls.Pager pager = ViewBag.Pager;
            string topic = ViewBag.Topic;
            int? queueId = ViewBag.QueueId;
            int? code = ViewBag.Code;
            string routingKey = ViewBag.RoutingKey;

            if (pager.HasPreviousPage)
            {
                @Html.ActionLink("<<", "Messages", new { topic = topic, queueId = queueId, code = code, routingKey = routingKey, page = pager.FirstPageIndex });
                @Html.ActionLink("<", "Messages", new { topic = topic, queueId = queueId, code = code, routingKey = routingKey, page = pager.PreviousPageIndex });
            }

            foreach (int page in ViewBag.Pager)
            {
                @Html.ActionLink(page.ToString(), "Messages", new { topic = topic, queueId = queueId, code = code, routingKey = routingKey, page = page });
            }

            if (pager.HasNextPage)
            {
                @Html.ActionLink(">", "Messages", new { topic = topic, queueId = queueId, code = code, routingKey = routingKey, page = pager.NextPageIndex });
                @Html.ActionLink(">>", "Messages", new { topic = topic, queueId = queueId, code = code, routingKey = routingKey, page = pager.LastPageIndex });
            }
        }
    </div>
</div>
